{
  "name": "tilelive",
  "version": "5.12.2",
  "main": "./lib/tilelive.js",
  "description": "API for various map tile backends",
  "url": "http://github.com/mapbox/tilelive.js",
  "keywords": [
    "map",
    "mapnik",
    "tiles"
  ],
  "licenses": [
    {
      "type": "BSD"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/mapbox/tilelive.js.git"
  },
  "author": {
    "name": "Mapbox",
    "email": "info@mapbox.com",
    "url": "https://www.mapbox.com/"
  },
  "contributors": [
    {
      "name": "Tom MacWright",
      "email": "tmcw"
    },
    {
      "name": "Will White",
      "email": "willwhite"
    },
    {
      "name": "Dane Springmeyer",
      "email": "springmeyer"
    },
    {
      "name": "Young Hahn",
      "email": "yhahn"
    },
    {
      "name": "Konstantin KÃ¤fer",
      "email": "kkaefer"
    },
    {
      "name": "Blake Thompson",
      "email": "flippmoke"
    }
  ],
  "dependencies": {
    "minimist": "~0.2.0",
    "progress-stream": "~0.5.x",
    "sphericalmercator": "~1.0.1",
    "queue-async": "~1.0.7"
  },
  "devDependencies": {
    "concat-stream": "1.4.x",
    "coveralls": "~2.11.1",
    "eslint": "^0.24.0",
    "istanbul": "~0.3.0",
    "mbtiles": "~0.8.2",
    "stream-combiner": "^0.2.2",
    "tape": "2.13.3",
    "tilejson": "~1.0.0"
  },
  "bin": {
    "tilelive-copy": "./bin/tilelive-copy"
  },
  "engines": {
    "node": ">= 0.10.0 < 5"
  },
  "scripts": {
    "test": "eslint --no-eslintrc -c .eslintrc lib/*.js && tape test/*.test.js",
    "cov": "istanbul cover tape test/*.test.js && coveralls < ./coverage/lcov.info"
  },
  "readme": "# tilelive.js\n\n[![Coverage Status](https://coveralls.io/repos/mapbox/tilelive.js/badge.svg)](https://coveralls.io/r/mapbox/tilelive.js)\n\n- Tilelive is a module to help interactions between tilelive source modules.\n- A tilelive source is an interface implemented by node modules that deal with reading and writing map tiles.\n\n[![Build Status](https://secure.travis-ci.org/mapbox/tilelive.js.svg)](http://travis-ci.org/mapbox/tilelive.js)\n\n## Implementing modules\n\n- [node-mbtiles](https://github.com/mapbox/node-mbtiles)\n- [node-tilejson](https://github.com/mapbox/node-tilejson)\n- [tilelive-mapnik](https://github.com/mapbox/tilelive-mapnik)\n- [tilelive-vector](https://github.com/mapbox/tilelive-vector)\n- [tilelive-bridge](https://github.com/mapbox/tilelive-bridge)\n\n## Usage\n\nTilelive doesn't ship with any implementing modules by default. To register a module as one tilelive recognizes:\n\n    require('[implementation]').registerProtocols(tilelive);\n\n* `tilelive.list(source, callback)`: Lists all tilesets in a directory. `source` is a folder that is used by registered implementations to search for individual tilesets. `callback` receives an error object (or `null`) and a hash hash with keys being Tilestore IDs and values being Tilestore URIs. Example:\n\n```javascript\n{\n    \"world-light\": \"mbtiles:///path/to/file/world-light.mbtiles\",\n    \"mapquest\": \"tilejson:///path/to/file/mapquest.tilejson\"\n}\n```\n\n* `tilelive.findID(source, id, callback)`: Looks for a particular tileset ID in a directory. `callback` receives an error object (or `null`) and the URI of the tileset.\n\n\n* `tilelive.load(uri, callback)`: Loads the Tilestore object associated with the specified `uri`. `callback` receives an error object (or `null`) and the [Tilestore object](API.md).\n\n* `tilelive.info(uri, callback)`: Loads the Tilestore object associated with the specified `uri` and retrieves its metadata in a [TileJSON](http://github.com/mapbox/tilejson-spec) compliant format. `callback` receives an error object (or `null`), the metadata hash and the Tilestore object.\n\n* `tilelive.all(source, callback)`: Loads metadata in a [TileJSON](http://github.com/mapbox/tilejson-spec) compliant format for all tilesets in the `source` directory. `callback` receives an error object (or `null`) and an array with TileJSON metadata about each tileset in that directory.\n\n* `tilelive.verify(tilejson)`: Validates a TileJSON object and returns error objects for invalid entries.\n\n## Read/write streams\n\nTilelive provides an implementation of node object streams for copying tiles from one source to another.\n\n    // Copy all tiles and metadata from source A to source B.\n    var get = tilelive.createReadStream(sourceA);\n    var put = tilelive.createWriteStream(sourceB);\n    get.pipe(put);\n    put.on('finish', function() {\n        console.log('done!');\n    });\n\nSee `tilelive-copy` and the streams tests for example usage of copy streams.\n\n## Parallel read streams\n\nTilelive can split a read operation into an arbitrary number of jobs. Pass a `job` parameter to options when using `tilelive.createReadStream` or `tilelive.deserialize`:\n\n```javascript\nvar readable = tilelive.createReadStream(src, { type: 'scanline', job: { total: 4, num: 1 } });\n```\n\nThis instructs tilelive to only read tiles that would fall into job `1` of `4`. A complete read would mean four calls each with a different `num`.\n\n## bin/tilelive-copy\n\ntilelive can be used to copy data between tilestores. For a full list of options, run `tilelive-copy`.\n\n## Tests\n\nTo run the tests\n\n    npm test\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mapbox/tilelive.js/issues"
  },
  "homepage": "https://github.com/mapbox/tilelive.js#readme",
  "_id": "tilelive@5.12.2",
  "_shasum": "9ede3aefded4b04e0be32e0dfc6a1ce01247eef7",
  "_resolved": "https://registry.npmjs.org/tilelive/-/tilelive-5.12.2.tgz",
  "_from": "https://registry.npmjs.org/tilelive/-/tilelive-5.12.2.tgz"
}
