{
  "name": "postgis-vt-util",
  "version": "1.0.0",
  "description": "PostGIS helper functions for making vector tiles",
  "main": "./package.json",
  "scripts": {
    "test": "test/sql-test.sh"
  },
  "readme": "PostGIS Vector Tile Utils\n=========================\n\nA set of PostgeSQL functions that are useful when creating vector tile sources,\neither at the query stage in [Mapbox Studio][1] or in the earlier data\npreparation stages.\n\n[1]: http://mapbox.com/mapbox-studio\n\nInstallation\n------------\n\nEverything you need is in `dist/postgis-vt-util.sql`. This project is also\navailable [as an NPM module][2] if that's useful to your workflow.\n\n[2]: https://www.npmjs.com/package/postgis-vt-util\n\nLoad the file into your database with `psql` or whatever your usual method is.\nEg:\n\n    psql -U <username> -d <dbname> -f postgis-vt-util.sql\n\nFunction Reference\n------------------\n\n<!-- DO NOT EDIT BELOW THIS LINE - AUTO-GENERATED FROM SQL COMMENTS -->\n\n### Bounds ###\n\nReturns an array of the bounding coordinates of the input geometry -\n`{xmin, ymin, xmax, ymax}`. Useful for interfacing with software outside of\nPostGIS, among other things.\n\nIf an SRID is specified the output will be the bounds of the reprojected\ngeometry, not a reprojected bounding box.\n\n__Parameters:__\n\n- `geometry` g - Any geometry\n- `integer` srid (optional) - The desired output SRID of the bounds, if\n  different from the input.\n\n__Returns:__ `float[]` - an array of 4 floats, `{xmin, ymin, xmax, ymax}`\n\n\n### CleanInt ###\n\nReturns the input text as an integer if possible, otherwise null.\n\n__Parameters:__\n\n- `text` i - Text that you would like as an integer.\n\n__Returns:__ `integer`\n\n\n### CleanNumeric ###\n\nReturns the input text as an numeric if possible, otherwise null.\n\n__Parameters:__\n\n- `text` i - Text that you would like as an numeric.\n\n__Returns:__ `numeric`\n\n\n### LabelGrid ###\n\nReturns a \"hash\" of a geometry's position on a specified grid to use in a GROUP\nBY clause. Useful for limiting the density of points or calculating a localized\nimportance ranking.\n\nThis function is most useful on point geometries intended for label placement\n(eg points of interest) but will accept any geometry type. It is usually used\nas part of either a `DISTINCT ON` expression or a `rank()` window function.\n\n__Parameters:__\n\n- `geometry` g - A geometry.\n- `numeric` grid_size - The cell size of the desired grouping grid.\n\n__Returns:__ `text` - A text representation of the labelgrid cell\n\n__Example Mapbox Studio query:__\n\n```sql\n(   SELECT * FROM (\n        SELECT DISTINCT ON (LabelGrid(geom, 64*!pixel_width!)) * FROM (\n            SELECT id, name, class, population, geom FROM city_points\n            WHERE geom && !bbox!\n        ) AS raw\n        ORDER BY LabelGrid(geom, 64*!pixel_width!), population DESC, id\n    ) AS filtered\n    ORDER BY population DESC, id\n) AS final\n```\n\n\n### LargestPart ###\n\nReturns the largest single part of a multigeometry.\n\n- Given a multipolygon or a geometrycollection containing at least one polygon,\n  this function will return the single polygon with the largest area.\n- Given a multilinestring or a geometrycollection containing at least one\n  linestring and no polygons, this function will return the single linestring\n  with the longest length.\n- Given a single point, line, or polygon, the original geometry will be\n  returned.\n- Given any other geometry type the result of ST_GeometryN(<geom>, 1) will be\n  returned. (See the documentation for that function.)\n\n__Parameters:__\n\n- `geometry` g - A geometry.\n\n__Returns:__ `geometry` - The largest single part of the input geometry.\n\n\n### LineLabel ###\n\nThis function tries to estimate whether a line geometry would be long enough to\nhave the given text placed along it at the specified scale.\n\nIt is useful in vector tile queries to filter short lines from zoom levels\nwhere they would be unlikely to have text places on them anyway.\n\n__Parameters:__\n\n- `numeric` zoom - The Web Mercator zoom level you are considering.\n- `text` label - The label text that you will be placing along the line.\n- `geometry(linestring)` g - A line geometry.\n\n__Returns:__ `boolean`\n\n\n### MakeArc ###\n\nCreates a CircularString arc based on 3 input points.\n\n__Parameters:__\n\n- `geometry(point)` p0 - The starting point of the arc.\n- `geometry(point)` p1 - A point along the path of th arc.\n- `geometry(point)` p2 - The end point of the arc.\n- `integer` srid (optional) - Sets the SRID of the output geometry. Useful\n  when input points have no SRID. If not specified the SRID of the first\n  input geometry will be assigned to the output.\n\n__Returns:__ `geometry(linestring)`\n\n__Examples:__\n\n\n```sql\nSELECT MakeArc(\n    ST_MakePoint(-100, 0),\n    ST_MakePoint(0, 100),\n    ST_MakePoint(100, 0),\n    3857\n);\n```\n\n\n### MercBuffer ###\n\nWraps ST_Buffer to adjust the buffer distance by latitude in order to\napproximate real-world measurements. Assumes input geometries are Web Mercator\nand input distances are real-world meters. Accuracy decreases for larger buffer\ndistances and at extreme latitudes.\n\n__Parameters:__\n\n- `geometry` g - A geometry to buffer.\n- `numeric` distance - The distance you would like to buffer, in real-world\n  meters.\n\n__Returns:__ `geometry`\n\n\n### MercDWithin ###\n\nWrapper for ST_DWithin that adjusts distance by latitude to approximate real-\nworld measurements. Assumes input geometries are Web Mercator and input\ndistances are real-world meters. Accuracy decreases for larger distances and at\nextreme latitudes.\n\n__Parameters:__\n\n- `geometry` g1 - The first geometry.\n- `geometry` g2 - The second geometry.\n- `numeric` distance - The maximum distance to check against\n\n__Returns:__ `boolean`\n\n\n### MercLength ###\n\nWrapper for ST_Length that adjusts distance by latitude to approximate real-\nworld measurements. Assumes input geometries are Web Mercator.  Accuracy\ndecreases for larger y-axis ranges of the input.\n\n__Parameters:__\n\n- `geometry` g - A (multi)linestring geometry.\n\n__Returns:__ `numeric`\n\n\n### OrientedEnvelope ###\n\nReturns the oriented minimum-bounding rectangle of a geometry.\n\n__Parameters:__\n\n- `geometry` g - A geometry.\n\n__Returns:__ `geometry(polygon)`\n\n\n### SmartShrink ###\n\nBuffers a polygon progressively (on an exponential scale) until the\narea of the result hits a certain threshold ratio to the original area.\nThe result is also simplified with a tolerance matching the inset\ndistance.\n\n__Parameters:__\n\n- `geometry` g - A (multi)polygon.\n- `float` ratio - The threshold for how much smaller (by area) you want\n  the shrunk polygon to be compared to the original. Eg a value of 0.6\n  would result in a polygon that is at least 60% as large as the input.\n- `boolean` simplify - Defaults to false. Whether or not you would\n  like the shrunk geometry simplified.\n\n__Returns:__ `geometry`\n\n\n### TileBBox ###\n\nGiven a Web Mercator tile ID as (z, x, y), returns a bounding-box\ngeometry of the area covered by that tile.\n\n__Parameters:__\n\n- `integer` z - A tile zoom level.\n- `integer` x - A tile x-position.\n- `integer` y - A tile y-position.\n- `integer` srid - SRID of the desired target projection of the bounding\n  box. Defaults to 3857 (Web Mercator).\n\n__Returns:__ `geometry(polygon)`\n\n\n### ToPoint ###\n\nHelper to wrap ST_PointOnSurface, ST_MakeValid. This is needed because\nof a ST_PointOnSurface bug in geos < 3.3.8 where POLYGON EMPTY can pass\nthrough as a polygon geometry.\n\n__Parameters:__\n\n- `geometry` g - A geometry.\n\n__Returns:__ `geometry(point)`\n\n__Example:__\n\n```sql\n-- Create an additional point geometry colums for labeling\nALTER TABLE city_park ADD COLUMN geom_label geometry(point);\nUPDATE city_park SET geom_label = ToPoint(geom);\n```\n\n\n### ZRES ###\n\nTakes a web mercator zoom level and returns the pixel resolution for that\nscale, assuming 256x256 pixel tiles. Non-integer zoom levels are accepted.\n\n__Parameters:__\n\n- `float` z - A Web Mercator zoom level.\n\n__Returns:__ `float`\n\n__Examples:__\n\n```sql\n-- Delete all polygons smaller than 1px square at zoom level 10\nDELETE FROM water_polygons WHERE sqrt(ST_Area(geom)) < ZRes(10);\n\n-- Simplify geometries to a resolution appropriate for zoom level 10\nUPDATE water_polygons SET geom = ST_Simplify(geom, ZRes(10));\n```\n\n\n### Z ###\n\nReturns a Web Mercator integer zoom level given a scale denominator.\n\nUseful with Mapnik's !scale_denominator! token in vector tile source\nqueries.\n\n__Parameters:__\n\n- `numeric` scale_denominator - The denominator of the scale, eg `250000`\n  for a 1:250,000 scale.\n\n__Returns:__ `integer`\n\n__Example Mapbox Studio query:__\n\n```sql\n( SELECT * FROM roads\n  WHERE Z(!scale_denominator!) >= 12\n) AS data\n```\n\n",
  "readmeFilename": "README.md",
  "_id": "postgis-vt-util@1.0.0",
  "_shasum": "e3da5a69efc46fe902642f8f79af68c07244a50d",
  "_resolved": "git+https://github.com/mapbox/postgis-vt-util.git#f609a998638fe6fbb2fa0f9e7cf49e0735e669c0",
  "_from": "postgis-vt-util@git+https://github.com/mapbox/postgis-vt-util.git"
}
