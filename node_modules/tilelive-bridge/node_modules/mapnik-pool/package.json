{
  "name": "mapnik-pool",
  "version": "0.1.3",
  "description": "manage a pool of mapnik instances",
  "main": "index.js",
  "scripts": {
    "test": "tape test/*.js",
    "coverage": "istanbul cover tape test/*.js && coveralls < ./coverage/lcov.info"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/mapbox/mapnik-pool.git"
  },
  "keywords": [
    "mapnik",
    "pool",
    "maps"
  ],
  "author": {
    "name": "Tom MacWright"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/mapbox/mapnik-pool/issues"
  },
  "homepage": "https://github.com/mapbox/mapnik-pool",
  "dependencies": {
    "generic-pool": "~2.2.1",
    "xtend": "~4.0.0"
  },
  "devDependencies": {
    "coveralls": "^2.11.4",
    "istanbul": "^0.4.0",
    "tape": "^4.2.2",
    "mapnik": ">= 1.4.2 < 4.0.0"
  },
  "readme": "![mapnik-pool](https://cloud.githubusercontent.com/assets/83384/4493143/fe155e76-4a46-11e4-81db-61f319910acb.png)\n\n[![Build Status](https://travis-ci.org/mapbox/mapnik-pool.svg?branch=master)](https://travis-ci.org/mapbox/mapnik-pool)\n[![Coverage Status](https://coveralls.io/repos/mapbox/mapnik-pool/badge.svg?branch=master&service=github)](https://coveralls.io/github/mapbox/mapnik-pool?branch=master)\n\n# mapnik-pool\n\nIf you want to use `node-mapnik` in an app with concurrency, you'll want to use\na map pool. By design Mapnik Maps are not meant to be shared between threads because datasources hold state. This [may change in the future](https://github.com/mapnik/mapnik/issues/2521) but for now using a single map instance with async node-mapnik rendering functions may your app. Also using several map instances will give you a significant speedup. `mapnik-pool` manages a `generic-pool` of `mapnik.Map` instances so you don't have to.\n\n## install\n\n    npm install --save mapnik-pool\n\n## dependency structure\n\n`mapnik-pool` is a [peerDependency](http://domenic.me/2013/02/08/peer-dependencies/)\nof `node-mapnik`: you bring your own Mapnik version, as long as its `~1.0.0`.\n\n## example\n\n```js\nvar mapnik = require('mapnik'),\n    mapnikPool = require('mapnik-pool')(mapnik),\n    fs = require('fs');\n\nvar pool = mapnikPool.fromString(fs.readFileSync('mymap.xml', 'utf8'));\n\npool.acquire(function(err, map) {\n    // pooled map\n});\n```\n\n## api\n\n### `fromString(str, initOptions, mapOptions)`\n\n* `str`: a Mapnik XML string\n* `initOptions`: options for initialization. Currently, `size` for map, `bufferSize`. Default `{ size: 256 }`\n* `mapOptions`: options for the `fromString` method.\n",
  "readmeFilename": "README.md",
  "_id": "mapnik-pool@0.1.3",
  "_shasum": "9bdad1cb34d87a19bc78ecb4cbfbaa203b2f3f2b",
  "_resolved": "https://registry.npmjs.org/mapnik-pool/-/mapnik-pool-0.1.3.tgz",
  "_from": "https://registry.npmjs.org/mapnik-pool/-/mapnik-pool-0.1.3.tgz"
}
