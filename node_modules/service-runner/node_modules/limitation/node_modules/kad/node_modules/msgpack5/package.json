{
  "name": "msgpack5",
  "version": "3.4.0",
  "description": "A msgpack v5 implementation for node.js and the browser, with extension points",
  "main": "index.js",
  "scripts": {
    "test": "standard && tape test/* | faucet",
    "build": "npm run browserify && npm run dist",
    "browserify": "browserify index.js -o dist/msgpack5.js -s msgpack5",
    "dist": "uglifyjs dist/msgpack5.js -o dist/msgpack5.min.js",
    "test-browser": "browserify test/* | testling -u"
  },
  "pre-commit": [
    "test"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/mcollina/msgpack5.git"
  },
  "keywords": [
    "msgpack",
    "extension",
    "v5",
    "msgpack",
    "v5",
    "ext"
  ],
  "author": {
    "name": "Matteo collina",
    "email": "hello@matteocollina.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mcollina/msgpack5/issues"
  },
  "homepage": "https://github.com/mcollina/msgpack5",
  "devDependencies": {
    "browserify": "^10.2.4",
    "faucet": "0.0.1",
    "jshint": "^2.5.2",
    "level-test": "^2.0.0",
    "pre-commit": "1.0.10",
    "standard": "^6.0.4",
    "tape": "^4.0.0",
    "testling": "^1.7.1",
    "uglify-js": "^2.4.15"
  },
  "standard": {
    "ignore": [
      "dist/"
    ]
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/6..latest",
      "chrome/22..latest",
      "firefox/16..latest",
      "safari/latest",
      "opera/11.0..latest",
      "iphone/6",
      "ipad/6",
      "android-browser/latest"
    ]
  },
  "dependencies": {
    "bl": "^1.0.0",
    "inherits": "^2.0.1",
    "readable-stream": "^2.0.1"
  },
  "readme": "msgpack5&nbsp;&nbsp;[![Build Status](https://travis-ci.org/mcollina/msgpack5.png)](https://travis-ci.org/mcollina/msgpack5)\n========\n\nA msgpack v5 implementation for node.js and the browser, with extension point support.\n\nInstall\n-------\n\n```bash\nnpm install msgpack5 --save\n```\n\n\nUsage\n-----\n\n```js\nvar msgpack = require('msgpack5')() // namespace our extensions\n  , a       = new MyType(2, 'a')\n  , encode  = msgpack.encode\n  , decode  = msgpack.decode\n\nmsgpack.register(0x42, MyType, mytipeEncode, mytipeDecode)\n\nconsole.log(encode({ 'hello': 'world' }).toString('hex'))\n// 81a568656c6c6fa5776f726c64\nconsole.log(decode(encode({ 'hello': 'world' })))\n// { hello: 'world' }\nconsole.log(encode(a).toString('hex'))\n// d5426161\nconsole.log(decode(encode(a)) instanceof MyType)\n// true\nconsole.log(decode(encode(a)))\n// { value: 'a', size: 2 }\n\nfunction MyType(size, value) {\n  this.value = value\n  this.size  = size\n}\n\nfunction mytipeEncode(obj) {\n  var buf = new Buffer(obj.size)\n  buf.fill(obj.value)\n  return buf\n}\n\nfunction mytipeDecode(data) {\n  var result = new MyType(data.length, data.toString('utf8', 0, 1))\n    , i\n\n  for (i = 0; i < data.length; i++) {\n    if (data.readUInt8(0) != data.readUInt8(i)) {\n      throw new Error('should all be the same')\n    }\n  }\n\n  return result\n}\n```\n\nIn the Browser\n-----------\n\nThis library is compatible with [Browserify](http://npm.im/browserify).\n\nIf you want to use standalone, grab the file in the `dist` folder of\nthis repo, and use in your own HTML page, the module will expose a\n`msgpack5` global.\n\n\n```\n<script type=\"text/javascript\"\n        src=\"./msgpack5.min.js\">\n</script>\n```\n\n### To build\n\n```\n\tnpm run build\n```\n\nAPI\n---\n\n<a name=\"api\"></a>\n## API\n\n  * <a href=\"#msgpack\"><code><b>msgpack()</b></code></a>\n  * <a href=\"#encode\"><code>msgpack().<b>encode()</b></code></a>\n  * <a href=\"#decode\"><code>msgpack().<b>decode()</b></code></a>\n  * <a href=\"#registerEncoder\"><code>msgpack().<b>registerEncoder()</b></code></a>\n  * <a href=\"#registerDecoder\"><code>msgpack().<b>registerDecoder()</b></code></a>\n  * <a href=\"#register\"><code>msgpack().<b>register()</b></code></a>\n  * <a href=\"#encoder\"><code>msgpack().<b>encoder()</b></code></a>\n  * <a href=\"#decoder\"><code>msgpack().<b>decoder()</b></code></a>\n\n-------------------------------------------------------\n<a name=\"msgpack\"></a>\n### msgpack(options(obj))\n\nCreates a new instance on which you can register new types for being\nencoded.\n\noptions:\n\n- `forceFloat64`, a boolean to that forces all floats to be encoded as 64-bits floats. Defaults to false.\n- `compatibilityMode`, a boolean that enables \"compatibility mode\" which doesn't use str 8 format. Defaults to false.\n\n-------------------------------------------------------\n<a name=\"encode\"></a>\n### encode(object)\n\nEncodes `object` in msgpack, returns a [bl](http://npm.im/bl).\n\n-------------------------------------------------------\n<a name=\"decode\"></a>\n### decode(buf)\n\nDecodes buf from in msgpack. `buf` can be a `Buffer` or a [bl](http://npm.im/bl) instance.\n\nIn order to support a stream interface, a user must pass in a [bl](http://npm.im/bl) instance.\n\n-------------------------------------------------------\n<a name=\"registerEncoder\"></a>\n### registerEncoder(check(obj), encode(obj))\n\nRegister a new custom object type for being automatically encoded.\nThe arguments are:\n\n- `check`, a function that will be called to check if the passed\n  object should be encoded with the `encode` function\n- `encode`, a function that will be called to encode an object in binary\n  form; this function __must__ return a `Buffer` which include the same type\n  for [registerDecoder](#registerDecoder).\n\n-------------------------------------------------------\n<a name=\"registerDecoder\"></a>\n### registerDecoder(type, decode(buf))\n\nRegister a new custom object type for being automatically decoded.\nThe arguments are:\n\n- `type`, is a greater than zero integer identificating the type once serialized\n- `decode`, a function that will be called to decode the object from\n  the passed `Buffer`\n\n\n-------------------------------------------------------\n<a name=\"register\"></a>\n### register(type, constructor, encode(obj), decode(buf))\n\nRegister a new custom object type for being automatically encoded and\ndecoded. The arguments are:\n\n- `type`, is a greater than zero integer identificating the type once serialized\n- `constructor`, the function that will be used to match the objects\n  with `instanceof`\n- `encode`, a function that will be called to encode an object in binary\n  form; this function __must__ return a `Buffer` that can be\n  deserialized by the `decode` function\n- `decode`, a function that will be called to decode the object from\n  the passed `Buffer`\n\nThis is just a commodity that calls\n[`registerEncoder`](#registerEncoder) and\n[`registerDecoder`](#registerDecoder) internally.\n\n-------------------------------------------------------\n<a name=\"encoder\"></a>\n### encoder()\n\nBuilds a stream in object mode that encodes msgpack.\n\n-------------------------------------------------------\n<a name=\"decoder\"></a>\n### decoder()\n\nBuilds a stream in object mode that decodes msgpack.\n\nLevelUp Support\n---------------\n\n__msgpack5__ can be used as a LevelUp\n[`valueEncoding`](https://github.com/rvagg/node-levelup#leveluplocation-options-callback) straight away:\n\n```js\nvar level = require('level')\n  , pack  = msgpack()\n  , db    = level('foo', {\n      valueEncoding: pack\n    })\n  , obj   = { my: 'obj' }\n\ndb.put('hello', obj, function(err) {\n  db.get('hello', function(err, result) {\n    console.log(result)\n    db.close()\n  })\n})\n\n```\n\nRelated projects\n----------------\n\n- [msgpack5rpc](http://npmjs.com/package/msgpack5rpc): An implementation of the\n  [msgpack-rpc spec](https://github.com/msgpack-rpc/msgpack-rpc/blob/master/spec.md)\n  on top of this library.\n\nDisclaimer\n----------\n\nThis library is built fully on JS and on [bl](http://npm.im/bl) to\nsimplify the code. Every improvement that keeps the same API is welcome.\n\nAcknowledgements\n----------------\n\nThis project was kindly sponsored by [nearForm](http://nearform.com).\n\n\nThis library was originally built as the data format for\n[JSChan](http://npm.im/jschan).\n\nLicense\n-------\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "msgpack5@3.4.0",
  "_shasum": "d122c9e626cac291d44e2b824d1207ac2f4f15f6",
  "_resolved": "https://registry.npmjs.org/msgpack5/-/msgpack5-3.4.0.tgz",
  "_from": "https://registry.npmjs.org/msgpack5/-/msgpack5-3.4.0.tgz"
}
