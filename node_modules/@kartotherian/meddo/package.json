{
  "_args": [
    [
      {
        "raw": "@kartotherian/meddo@github:kartotherian/meddo#master",
        "scope": "@kartotherian",
        "escapedName": "@kartotherian%2fmeddo",
        "name": "@kartotherian/meddo",
        "rawSpec": "github:kartotherian/meddo#master",
        "spec": "github:kartotherian/meddo#master",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:kartotherian/meddo.git#master",
          "sshUrl": "git+ssh://git@github.com/kartotherian/meddo.git#master",
          "httpsUrl": "git+https://github.com/kartotherian/meddo.git#master",
          "gitUrl": "git://github.com/kartotherian/meddo.git#master",
          "shortcut": "github:kartotherian/meddo#master",
          "directUrl": "https://raw.githubusercontent.com/kartotherian/meddo/master/package.json"
        }
      },
      "/opt/service"
    ]
  ],
  "_from": "kartotherian/meddo#master",
  "_id": "@kartotherian/meddo@0.0.1",
  "_inCache": true,
  "_location": "/@kartotherian/meddo",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@kartotherian/meddo@github:kartotherian/meddo#master",
    "scope": "@kartotherian",
    "escapedName": "@kartotherian%2fmeddo",
    "name": "@kartotherian/meddo",
    "rawSpec": "github:kartotherian/meddo#master",
    "spec": "github:kartotherian/meddo#master",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:kartotherian/meddo.git#master",
      "sshUrl": "git+ssh://git@github.com/kartotherian/meddo.git#master",
      "httpsUrl": "git+https://github.com/kartotherian/meddo.git#master",
      "gitUrl": "git://github.com/kartotherian/meddo.git#master",
      "shortcut": "github:kartotherian/meddo#master",
      "directUrl": "https://raw.githubusercontent.com/kartotherian/meddo/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/kartotherian/meddo.git#3a9903bfd0f5d996972fd35a657033da94cf8210",
  "_shasum": "99c630e06080020de026cdd36df40429d103d36c",
  "_shrinkwrap": null,
  "_spec": "@kartotherian/meddo@github:kartotherian/meddo#master",
  "_where": "/opt/service",
  "author": {
    "name": "Paul Norman",
    "email": "penorman@mac.com"
  },
  "bugs": {
    "url": "https://github.com/kartotherian/meddo/issues"
  },
  "dependencies": {},
  "description": "Data source for Wikipedia maps from OSM data",
  "devDependencies": {},
  "gitHead": "3a9903bfd0f5d996972fd35a657033da94cf8210",
  "homepage": "https://github.com/kartotherian/meddo#readme",
  "keywords": [
    "kartotherian",
    "tilelive"
  ],
  "license": "GPL-2.0",
  "main": "./package.json",
  "name": "@kartotherian/meddo",
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public"
  },
  "readme": "# meddo\n\nData source for Wikipedia maps from OSM data\n\n## Install\n\nThis style requires an osm2pgsql database loaded with [https://github.com/ClearTables/ClearTables](https://github.com/ClearTables/ClearTables) and ocean data.\n\n### Requirements\n\n* ClearTables v0.1.0. If you're intending to use this with the Kartotherian Geoshapes service, you'll want the v0.1.0.wikidata.1 tag.\n* Mapnik 3.0.0 or later\n* Software that can interpret YAML style definitions like Kosmtik or Mapbox Studio Classic\n* osm2pgsql 0.90.1 or later with Lua support. Early C++ versions > 0.86.0 may still work with some bugs or missing data.\n* PostgreSQL 9.3 or later. 9.4 or later is recommended as earlier versions are not adequately tested with the style.\n* PostGIS 2.0 or later. 2.3 or later is recommended as earlier versions are not adequately tested with the style.\n* Python 3.4 or later\n\n### Load the data with ClearTables\n\nSee the [ClearTables documentation for details](https://github.com/ClearTables/ClearTables#usage) and load into the database `ct`, with the command-line option `-G`\n\n```sh\ngit clone -b v0.1.0 git://github.com/ClearTables/ClearTables.git\npushd ClearTables\ncreatedb ct\npsql -d ct -c 'CREATE EXTENSION postgis; CREATE EXTENSION hstore; CREATE EXTENSION unaccent; CREATE EXTENSION fuzzystrmatch;'\nmake # Create cleartables files\ncat sql/types/*.sql | psql -1Xq -d ct # Load SQL types\nosm2pgsql -E 3857 -G -d ct --number-processes 2 --output multi --style cleartables.json ~/path/to/extract # Load OSM data\ncat sql/post/*.sql | psql -1Xq -d ct # Add post-import SQL\npopd\n```\n\nOther osm2pgsql flags for performance or updates can be added, and will be necessary for large imports. See the osm2pgsql documentation for more details.\nFlags that might be needed include\n- `--slim`\n- `--cache`\n- `--flat-nodes`\n\nSlim mode is not required by this style, so ``--slim --drop`` can be safely used if updates are not required.\n\nIf PostgreSQL [`max_connections`](http://www.postgresql.org/docs/9.3/static/runtime-config-connection.html#RUNTIME-CONFIG-CONNECTION-SETTINGS)\nis increased from the default, `--number-processes` can be increased. If `--number-processes` is omitted, osm2pgsql will\nattempt to use as many processes as hardware threads. osm2pgsql will need aproximatelly `number-processes * (number rendering tables + 3)`, Where the number of rendering tables is ~42.\n\n\n### Load coastline data\n\nMeddo uses data from [OSMCoastline](https://github.com/osmcode/osmcoastline), hosted on [OpenStreetMapData](http://openstreetmapdata.com/), and from [Natural Earth](http://www.naturalearthdata.com/). The data used is documented in full in [`external-data.yml`](external-data.yml)\n\n```sh\npsql -d ct -c 'CREATE SCHEMA loading;'\n./get-external-data.py\n```\n\n`get-external-data.py` should be re-run periodically, and the command options can be obtained with `./get-external-data.py -h`\n\n### Load admin data\nMeddo uses data generated by [OSMBorder](https://github.com/pnorman/osmborder) for administrative boundaries.\n\nGenerate the borders with OSMBorder then run the SQL\n\n```sql\nCREATE TABLE osmborder_lines (\n  osm_id bigint,\n  admin_level int,\n  dividing_line bool,\n  disputed bool,\n  maritime bool,\n  way Geometry(LineString, 3857));\n\n\\copy osmborder_lines FROM osmborder_lines.csv\n\nCREATE INDEX osmborder_lines_way_idx ON osmborder_lines USING gist (way) WITH (fillfactor=100);\nCLUSTER osmborder_lines USING osmborder_lines_way_idx;\nCREATE INDEX osmborder_lines_way_low_idx ON osmborder_lines USING gist (way) WITH (fillfactor=100) WHERE admin_level <= 4;\n```\n\n### Install required functions\n\nMeddo requires some standard stylesheet-independent functions\n\n```sh\npsql -d ct -f functions.sql\n```\n\n## Usage\n\n### Development\n\nA suitable design program like Kosmtik or Mapbox Studio Classic is needed. If Kosmtik is installed, `kosmtik serve data.yml` will start Kosmtik, and the Data Inspector can be used. For Mapbox Studio, the entire repository is a tm2source project.\n\n### Production\n\nIt might be necessary to compile the project to Mapnik XML for production, which can be done in many ways. One way is `kosmtik export data.yml --format xml --output meddo.xml`\n\n## Schema\n\n*TBD.*\n\n## Why \"meddo\"?\n\n[Meddo](https://en.wikipedia.org/wiki/Marshall_Islands_stick_chart#Meddo_charts) is a type of [Polynesian stick chart](https://en.wikipedia.org/wiki/Marshall_Islands_stick_chart) which contains only a section of the island chain, and meddo creates vector tiles from a larger database. It's also based on the same language as \"wiki\".\n\n## License\n\nThe code is licensed under the [MIT License](LICENSE). If used as directed, use [ODbL licensed OpenStreetMap data](https://www.openstreetmap.org/copyright).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kartotherian/meddo.git"
  },
  "version": "0.0.1"
}
